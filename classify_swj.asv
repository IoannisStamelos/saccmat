function [valid_pairs, dot_products] = classify_swj(sac, time_series)

    % Parameters for SWJ classification
    min_ampl = 0.5;      % Minimum amplitude threshold
    max_duration = 0.4;  % Maximum time interval between saccades (seconds)
    min_duration = 0.1;  % Minimum time interval between saccades (seconds)
    dot_threshold = -0.8; % Threshold for negative dot product
    
    % Extract relevant data
    t = time_series(:, 1);       % Time vector
    saccades = sac(:, 4:5);      % X and Y displacement components
    times = t(sac(:, 1));        % Start times of saccades
    
    % Compute amplitude of saccades
    ampl = sqrt(sum(saccades.^2, 2));
    
    % Filter out saccades with small amplitude
    valid_indices = ampl > min_ampl;
    saccades = saccades(valid_indices, :);
    times = times(valid_indices);
    sac = sac(valid_indices, :); % Filter sac for consistency
    
    % Normalize the saccade vectors
    %norm_factors = sqrt(sum(saccades.^2, 2));
    saccades_normalized = saccades ./ norm_factors;
    
    % Initialize variables for pair storage
    N = size(saccades, 1); % Number of filtered saccades
    dot_products = zeros(N, N); % Dot product matrix
    valid_pairs = []; % Store valid SWJ pairs
    
    % Compute dot products and classify SWJ pairs
    for i = 1:N-1
        for j = i+1:N
            % Calculate time difference
            time_diff = abs(times(j) - times(i));
            
            % Apply time filter
            if time_diff >= min_duration && time_diff <= max_duration
                % Compute dot product of the normalized vectors
                dot_products(i, j) = dot(saccades_normalized(i, :), saccades_normalized(j, :));
                
                % Check for opposite directions and classify as SWJ
                if dot_products(i, j) < dot_threshold
                        if isempty(valid_pairs) || ~any(valid_pairs(:, 1) == i) && ~any(valid_pairs(:, 2) == i) && ...
                           ~any(valid_pairs(:, 1) == j) && ~any(valid_pairs(:, 2) == j)
                            valid_pairs = [valid_pairs; i, j, dot_products(i, j), times(i), times(j)];
                        end    
                end
            end
        end
    end
    
   
    valid_pairs = sortrows(valid_pairs, 1);
        figure
        set(0,'DefaultFigureWindowStyle','docked')
        plot(t,time_series(:,2))
        xlabel("seconds")
        ylabel("degrees")
        title("SWJ2")
        hold on
        xline(valid_pairs(:,4))
        xline(valid_pairs(:,5),'r')
        yline(mode(time_series(:,2)),'-')
        disp("Number of Square Wave Jerks:")
        disp(height(valid_pairs))
        hold off
    
    
    
end
